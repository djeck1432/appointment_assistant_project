from django.core.management.base import BaseCommand, CommandError
from telethon import TelegramClient, events
from dotenv import load_dotenv
import os
import re
from anyio import create_task_group,run

PATTERN = r'(–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ|–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥|–ú–æ—Å–∫–≤—É|–ú–æ—Å–∫–≤–µ|–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ|–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫)'

class Command(BaseCommand):
    help = 'Parse telegram channel for fetch required info about reservation'

    def add_arguments(self, parser):
        parser.add_argument('channel_name' , help='parse tg channel')


    def handle(self,*args,**options):
        parse_tg = options['channel_name']
        run(start_telegram_client,parse_tg)


def get_city_name(message):
    result_match = re.search(PATTERN, message)
    if not result_match:
        return None

    city_name = result_match[0]
    if city_name in ('–ú–æ—Å–∫–≤—É','–ú–æ—Å–∫–≤–µ'):
        return '–ú–æ—Å–∫–≤–∞'
    elif city_name in ('–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ','–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'):
        return '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'
    elif city_name in ('–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ','–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫'):
        return '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫'


async def check_new_message(client,chat_name='test'):
    async with client:
        @client.on(events.NewMessage(chats=(chat_name)))
        async def normal_handler(event):
            try:
                new_message = event.message.to_dict()['message']
                print('work')
                city_name = get_city_name(new_message)
                return city_name
            except Exception as exc:
                print(exc)

        await client.run_until_disconnected()


async def start_telegram_client(channel_name):
    load_dotenv()
    api_id = os.getenv('APP_API_ID')
    api_hash = os.getenv('APP_API_HASH')

    client = TelegramClient('session_name', api_id, api_hash)

    async with create_task_group() as tg:
        await tg.spawn(check_new_message,client,channel_name)



def test_re_expression():
    message = 'ü§ñ –ü–æ—è–≤–ª—è–ª–∏—Å—å –º–µ—Å—Ç–∞ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –≤ –ú–æ—Å–∫–≤–µ: Tuesday January 21, 2020.'
    assert  re.findall(PATTERN, message)

    message = '–û—Ç–∫—Ä—ã—Ç–æ –Ω–µ–º–Ω–æ–≥–æ –º–µ—Å—Ç –≤ Pony Express –≤ –ú–æ—Å–∫–≤—É'
    assert re.findall(PATTERN, message)

    message = '–û—Ç–∫—Ä—ã—Ç –ø–æ—á—Ç–∏ –≤–µ—Å—å –∞–ø—Ä–µ–ª—å –≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–µ'
    assert  re.findall(PATTERN, message)

    message = '–û—Ç–∫—Ä—ã—Ç–æ –Ω–µ–º–Ω–æ–≥–æ –º–µ—Å—Ç –≤ Pony Express –≤ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'
    assert re.findall(PATTERN, message)

    message = '–° 16 –º–∞—Ä—Ç–∞ –∫–æ–Ω—Å—É–ª—å—Å—Ç–≤–æ –°–®–ê –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–º–µ–Ω—è–µ—Ç —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –Ω–∞ –Ω–µ–∏–º–º–∏–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–∏–∑—ã.'
    assert  re.findall(PATTERN,message)

    message = 'üéâ –û—Ç–∫—Ä—ã—Ç –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫'
    assert re.findall(PATTERN,message)

    message = '–ü–æ–¥–∞—á–∞ –Ω–∞ –≤–∏–∑—É —Å–µ–º—å–µ–π. –ö–∞–∫ –≤–Ω–µ—Å—Ç–∏ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç?'
    assert  not re.findall(PATTERN,message)
